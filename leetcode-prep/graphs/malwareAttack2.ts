class DSU {
  parent: number[];
  sizeArr: number[];

  constructor(N: number) {
    this.parent = Array(N)
      .fill(0)
      .map((_, i) => i);
    this.sizeArr = Array(N).fill(1);
  }

  find(x: number): number {
    if (this.parent[x] !== x) {
      this.parent[x] = this.find(this.parent[x]); // Path compression
    }
    return this.parent[x];
  }

  union(x: number, y: number): void {
    const xr = this.find(x);
    const yr = this.find(y);
    if (xr !== yr) {
      this.parent[xr] = yr;
      this.sizeArr[yr] += this.sizeArr[xr];
    }
  }

  size(x: number): number {
    return this.sizeArr[this.find(x)];
  }
}

function minMalwareSpread(graph: number[][], initial: number[]): number {
  const N = graph.length;
  const dsu = new DSU(N);

  // Union all connected nodes
  for (let i = 0; i < N; i++) {
    for (let j = i + 1; j < N; j++) {
      if (graph[i][j] === 1) {
        dsu.union(i, j);
      }
    }
  }

  // Count the occurrences of each component in `initial`
  const count = Array(N).fill(0);
  for (const node of initial) {
    count[dsu.find(node)]++;
  }

  // Find the answer
  let ans = -1;
  let ansSize = -1;
  for (const node of initial) {
    const root = dsu.find(node);
    if (count[root] === 1) {
      // Unique component
      const rootSize = dsu.size(root);
      if (rootSize > ansSize) {
        ansSize = rootSize;
        ans = node;
      } else if (rootSize === ansSize && node < ans) {
        ans = node;
      }
    }
  }

  // Fallback: If no unique component, return the smallest node
  if (ans === -1) {
    ans = Math.min(...initial);
  }

  return ans;
}

const dsv = new DSU(10);
console.log(dsv.parent);
console.log(dsv.find(6));
dsv.union(4, 5);
console.log(dsv.parent);
console.log(dsv.sizeArr);
dsv.union(6, 8);
console.log(dsv.parent);
console.log(dsv.sizeArr);
dsv.union(8, 5);
console.log(dsv.parent);
console.log(dsv.sizeArr);
dsv.union(0, 9);
console.log(dsv.parent);
console.log(dsv.sizeArr);
dsv.union(4, 4);
console.log(dsv.parent);
console.log(dsv.sizeArr);

console.log(
  minMalwareSpread(
    [
      [0, 1, 0, 0],
      [1, 0, 1, 0],
      [0, 1, 0, 1],
      [0, 0, 1, 0],
    ],
    [0, 1]
  )
);
console.log(
  minMalwareSpread(
    [
      [0, 1, 0],
      [1, 0, 1],
      [0, 1, 0],
    ],
    [0, 1]
  )
);
console.log(
  minMalwareSpread(
    [
      [0, 1, 1],
      [1, 0, 0],
      [1, 0, 0],
    ],
    [0, 1]
  )
);
console.log(
  minMalwareSpread(
    [
      [1, 0, 1, 0],
      [0, 1, 0, 0],
      [1, 0, 1, 0],
      [0, 0, 0, 1],
    ],
    [1]
  )
);
console.log(
  minMalwareSpread(
    [
      [1, 1, 0],
      [1, 1, 0],
      [0, 0, 1],
    ],
    [0, 1, 2]
  )
);

const dsu = new DSU(4);
console.log(dsu.parent, dsu.sizeArr);
dsu.union(0, 1);
console.log(dsu.parent, dsu.sizeArr);
dsu.union(1, 0);
dsu.union(1, 2);
dsu.union(2, 3);
console.log(dsu.parent, dsu.sizeArr);
